import React from "react";
type Style = {
    [key: string]: string;
};
interface BaseProps {
    height?: string | number;
    width?: string | number;
    color?: string;
    ariaLabel?: string;
    wrapperStyle?: Style;
    wrapperClass?: string;
    visible?: boolean;
}
export default Audio;
export default BallTriangle;
export default Bars;
export default Circles;
export default CirclesWithBar;
export default Grid;
export default Hearts;
export default InfinitySpin;
export default LineWave;
export default MutatingDots;
export default Oval;
export default Puff;
export default RevolvingDot;
export default Rings;
export default RotatingSquare;
type Props = {
    width?: string;
    visible?: boolean;
    strokeWidth?: string;
    strokeColor?: string;
    animationDuration?: string;
    ariaLabel?: string;
};
export function RotatingLines({ strokeColor, strokeWidth, animationDuration, width, visible, ariaLabel, }: Props): React.ReactElement | null;
export default TailSpin;
export default ThreeCircles;
export default ThreeDots;
export default Triangle;
export default Watch;
export default FallingLines;
export default Vortex;
interface RotatingTrianglesProps extends Omit<BaseProps, 'color'> {
    colors?: [string, string, string];
}
export function RotatingTriangles({ visible, height, width, wrapperClass, wrapperStyle, ariaLabel, colors, }: RotatingTrianglesProps): JSX.Element | null;
interface RadioProps extends Omit<BaseProps, 'color'> {
    colors?: [string, string, string];
}
export function Radio({ visible, height, width, wrapperClass, wrapperStyle, ariaLabel, colors, }: RadioProps): JSX.Element | null;
interface ProgressBarProps extends Omit<BaseProps, 'color'> {
    borderColor?: string;
    barColor?: string;
}
export function ProgressBar({ visible, height, width, wrapperClass, wrapperStyle, ariaLabel, borderColor, barColor, }: ProgressBarProps): JSX.Element | null;
interface MagnifyingGlassProps extends BaseProps {
    glassColor?: string;
}
export function MagnifyingGlass({ visible, height, width, wrapperClass, wrapperStyle, ariaLabel, glassColor, color, }: MagnifyingGlassProps): JSX.Element | null;
interface FidgetSpinnerProps extends Omit<BaseProps, 'color'> {
    backgroundColor?: string;
    ballColors?: [string, string, string];
}
export function FidgetSpinner({ width, height, backgroundColor, ballColors, wrapperClass, wrapperStyle, ariaLabel, visible, }: FidgetSpinnerProps): JSX.Element | null;
interface DNAProps extends Omit<BaseProps, 'color'> {
}
export function Dna({ visible, width, height, wrapperClass, wrapperStyle, ariaLabel, }: DNAProps): JSX.Element | null;
interface DiscussProps extends Omit<BaseProps, 'color'> {
    colors?: [string, string];
}
export function Discuss({ visible, width, height, wrapperClass, wrapperStyle, ariaLabel, colors }: DiscussProps): JSX.Element | null;
interface ColorRingProps extends Omit<BaseProps, 'color'> {
    colors?: [string, string, string, string, string];
}
export function ColorRing({ visible, width, height, colors, wrapperClass, wrapperStyle, ariaLabel, }: ColorRingProps): JSX.Element | null;
interface CommentProps extends BaseProps {
    backgroundColor?: string;
}
export function Comment({ visible, width, height, backgroundColor, color, wrapperClass, wrapperStyle, ariaLabel, }: CommentProps): JSX.Element | null;
interface BlocksProps extends BaseProps {
}
export function Blocks({ visible, width, height, wrapperClass, wrapperStyle, ariaLabel, }: BlocksProps): JSX.Element | null;
interface HourglassProps extends Omit<BaseProps, 'color'> {
    colors?: [string, string];
}
export function Hourglass({ visible, width, height, wrapperClass, wrapperStyle, ariaLabel, colors, }: HourglassProps): JSX.Element | null;

//# sourceMappingURL=types.d.ts.map
